/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LivestockManager {
  export type LivestockDetailsStruct = {
    healthStatus: string;
    age: BigNumberish;
    lastVaccinationDate: BigNumberish;
    insuranceId: string;
  };

  export type LivestockDetailsStructOutput = [
    healthStatus: string,
    age: bigint,
    lastVaccinationDate: bigint,
    insuranceId: string
  ] & {
    healthStatus: string;
    age: bigint;
    lastVaccinationDate: bigint;
    insuranceId: string;
  };

  export type ListingStruct = {
    tokenId: BigNumberish;
    owner: AddressLike;
    totalShares: BigNumberish;
    availableShares: BigNumberish;
    pricePerShare: BigNumberish;
    category: string;
    livestockType: string;
    details: LivestockManager.LivestockDetailsStruct;
    isVerified: boolean;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type ListingStructOutput = [
    tokenId: bigint,
    owner: string,
    totalShares: bigint,
    availableShares: bigint,
    pricePerShare: bigint,
    category: string,
    livestockType: string,
    details: LivestockManager.LivestockDetailsStructOutput,
    isVerified: boolean,
    isActive: boolean,
    createdAt: bigint
  ] & {
    tokenId: bigint;
    owner: string;
    totalShares: bigint;
    availableShares: bigint;
    pricePerShare: bigint;
    category: string;
    livestockType: string;
    details: LivestockManager.LivestockDetailsStructOutput;
    isVerified: boolean;
    isActive: boolean;
    createdAt: bigint;
  };

  export type InvestmentStruct = {
    listingId: BigNumberish;
    sharesOwned: BigNumberish;
  };

  export type InvestmentStructOutput = [
    listingId: bigint,
    sharesOwned: bigint
  ] & { listingId: bigint; sharesOwned: bigint };

  export type RoleRequestStruct = {
    user: AddressLike;
    role: BytesLike;
    pending: boolean;
  };

  export type RoleRequestStructOutput = [
    user: string,
    role: string,
    pending: boolean
  ] & { user: string; role: string; pending: boolean };
}

export interface LivestockManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "FARMER_ROLE"
      | "INVESTOR_ROLE"
      | "PLATFORM_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptedStablecoin"
      | "approveRole"
      | "claimFunds"
      | "createListing"
      | "getAllListings"
      | "getMyFarmerListings"
      | "getMyInvestments"
      | "getPendingRoleRequests"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRequestedRole"
      | "hasRole"
      | "initialize"
      | "invest"
      | "investmentShares"
      | "listingCounter"
      | "listings"
      | "livestockAssetNFT"
      | "pause"
      | "paused"
      | "pendingWithdrawals"
      | "proxiableUUID"
      | "renounceRole"
      | "requestRole"
      | "revokeRole"
      | "roleRequests"
      | "supportsInterface"
      | "unpause"
      | "upgradeToAndCall"
      | "userInvestments"
      | "verifyListing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsClaimed"
      | "Initialized"
      | "InvestmentMade"
      | "ListingCreated"
      | "ListingVerified"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleApproved"
      | "RoleGranted"
      | "RoleRequested"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FARMER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVESTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedStablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveRole",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      LivestockManager.LivestockDetailsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyFarmerListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyInvestments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRoleRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRequestedRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentShares",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "livestockAssetNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInvestments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyListing",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FARMER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVESTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyFarmerListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRoleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRequestedRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "livestockAssetNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyListing",
    data: BytesLike
  ): Result;
}

export namespace FundsClaimedEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    investor: AddressLike,
    numberOfShares: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    investor: string,
    numberOfShares: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    investor: string;
    numberOfShares: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCreatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    tokenId: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [listingId: bigint, tokenId: bigint, owner: string];
  export interface OutputObject {
    listingId: bigint;
    tokenId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingVerifiedEvent {
  export type InputTuple = [listingId: BigNumberish, auditor: AddressLike];
  export type OutputTuple = [listingId: bigint, auditor: string];
  export interface OutputObject {
    listingId: bigint;
    auditor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleApprovedEvent {
  export type InputTuple = [
    user: AddressLike,
    role: BytesLike,
    admin: AddressLike
  ];
  export type OutputTuple = [user: string, role: string, admin: string];
  export interface OutputObject {
    user: string;
    role: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRequestedEvent {
  export type InputTuple = [user: AddressLike, role: BytesLike];
  export type OutputTuple = [user: string, role: string];
  export interface OutputObject {
    user: string;
    role: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LivestockManager extends BaseContract {
  connect(runner?: ContractRunner | null): LivestockManager;
  waitForDeployment(): Promise<this>;

  interface: LivestockManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FARMER_ROLE: TypedContractMethod<[], [string], "view">;

  INVESTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PLATFORM_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptedStablecoin: TypedContractMethod<[], [string], "view">;

  approveRole: TypedContractMethod<
    [_user: AddressLike, _role: BytesLike, _requestIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimFunds: TypedContractMethod<[], [void], "nonpayable">;

  createListing: TypedContractMethod<
    [
      _totalShares: BigNumberish,
      _pricePerShare: BigNumberish,
      _category: string,
      _livestockType: string,
      _details: LivestockManager.LivestockDetailsStruct
    ],
    [void],
    "nonpayable"
  >;

  getAllListings: TypedContractMethod<
    [],
    [LivestockManager.ListingStructOutput[]],
    "view"
  >;

  getMyFarmerListings: TypedContractMethod<
    [],
    [LivestockManager.ListingStructOutput[]],
    "view"
  >;

  getMyInvestments: TypedContractMethod<
    [],
    [LivestockManager.InvestmentStructOutput[]],
    "view"
  >;

  getPendingRoleRequests: TypedContractMethod<
    [],
    [LivestockManager.RoleRequestStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRequestedRole: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      _livestockAssetNFT: AddressLike,
      _acceptedStablecoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  invest: TypedContractMethod<
    [_listingId: BigNumberish, _numberOfShares: BigNumberish],
    [void],
    "nonpayable"
  >;

  investmentShares: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  listingCounter: TypedContractMethod<[], [bigint], "view">;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        LivestockManager.LivestockDetailsStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        tokenId: bigint;
        owner: string;
        totalShares: bigint;
        availableShares: bigint;
        pricePerShare: bigint;
        category: string;
        livestockType: string;
        details: LivestockManager.LivestockDetailsStructOutput;
        isVerified: boolean;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  livestockAssetNFT: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestRole: TypedContractMethod<[_role: BytesLike], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roleRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        user: string;
        role: string;
        pending: boolean;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userInvestments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { listingId: bigint; sharesOwned: bigint }],
    "view"
  >;

  verifyListing: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FARMER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INVESTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptedStablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveRole"
  ): TypedContractMethod<
    [_user: AddressLike, _role: BytesLike, _requestIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [
      _totalShares: BigNumberish,
      _pricePerShare: BigNumberish,
      _category: string,
      _livestockType: string,
      _details: LivestockManager.LivestockDetailsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllListings"
  ): TypedContractMethod<[], [LivestockManager.ListingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyFarmerListings"
  ): TypedContractMethod<[], [LivestockManager.ListingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyInvestments"
  ): TypedContractMethod<
    [],
    [LivestockManager.InvestmentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingRoleRequests"
  ): TypedContractMethod<
    [],
    [LivestockManager.RoleRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRequestedRole"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      _livestockAssetNFT: AddressLike,
      _acceptedStablecoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _numberOfShares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investmentShares"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "listingCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        LivestockManager.LivestockDetailsStructOutput,
        boolean,
        boolean,
        bigint
      ] & {
        tokenId: bigint;
        owner: string;
        totalShares: bigint;
        availableShares: bigint;
        pricePerShare: bigint;
        category: string;
        livestockType: string;
        details: LivestockManager.LivestockDetailsStructOutput;
        isVerified: boolean;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "livestockAssetNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRole"
  ): TypedContractMethod<[_role: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        user: string;
        role: string;
        pending: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userInvestments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { listingId: bigint; sharesOwned: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyListing"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsClaimed"
  ): TypedContractEvent<
    FundsClaimedEvent.InputTuple,
    FundsClaimedEvent.OutputTuple,
    FundsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "ListingCreated"
  ): TypedContractEvent<
    ListingCreatedEvent.InputTuple,
    ListingCreatedEvent.OutputTuple,
    ListingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingVerified"
  ): TypedContractEvent<
    ListingVerifiedEvent.InputTuple,
    ListingVerifiedEvent.OutputTuple,
    ListingVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleApproved"
  ): TypedContractEvent<
    RoleApprovedEvent.InputTuple,
    RoleApprovedEvent.OutputTuple,
    RoleApprovedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRequested"
  ): TypedContractEvent<
    RoleRequestedEvent.InputTuple,
    RoleRequestedEvent.OutputTuple,
    RoleRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "FundsClaimed(address,uint256)": TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;
    FundsClaimed: TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InvestmentMade(uint256,address,uint256,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "ListingCreated(uint256,uint256,address)": TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;
    ListingCreated: TypedContractEvent<
      ListingCreatedEvent.InputTuple,
      ListingCreatedEvent.OutputTuple,
      ListingCreatedEvent.OutputObject
    >;

    "ListingVerified(uint256,address)": TypedContractEvent<
      ListingVerifiedEvent.InputTuple,
      ListingVerifiedEvent.OutputTuple,
      ListingVerifiedEvent.OutputObject
    >;
    ListingVerified: TypedContractEvent<
      ListingVerifiedEvent.InputTuple,
      ListingVerifiedEvent.OutputTuple,
      ListingVerifiedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleApproved(address,bytes32,address)": TypedContractEvent<
      RoleApprovedEvent.InputTuple,
      RoleApprovedEvent.OutputTuple,
      RoleApprovedEvent.OutputObject
    >;
    RoleApproved: TypedContractEvent<
      RoleApprovedEvent.InputTuple,
      RoleApprovedEvent.OutputTuple,
      RoleApprovedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRequested(address,bytes32)": TypedContractEvent<
      RoleRequestedEvent.InputTuple,
      RoleRequestedEvent.OutputTuple,
      RoleRequestedEvent.OutputObject
    >;
    RoleRequested: TypedContractEvent<
      RoleRequestedEvent.InputTuple,
      RoleRequestedEvent.OutputTuple,
      RoleRequestedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
